
.include "m328pdef.inc"

.def led_reg = r16
.def temperature_reg = r17
.def loop_reg_1 = r18
.def loop_reg_2 = r19

.equ EOS = 0

.cseg

	rjmp reset

reset:
	
	rcall LCD_master_init

	//Function Set
	cbi PORTB, 1
	cbi PORTB, 2
	ldi led_reg, 0x39
	rcall spi_txrx 
	rcall delay_30ms

	//Bias Set
	ldi led_reg, 0x1D
	rcall spi_txrx 
	rcall delay_30ms

	//Power Control
	ldi led_reg, 0x50
	rcall spi_txrx 
	rcall delay_30ms

	//Follower Control
	ldi led_reg, 0x6C
	rcall spi_txrx 
	rcall delay_30ms

	//Contrast Set
	ldi led_reg, 0x7C
	rcall spi_txrx 
	rcall delay_30ms

	//Function Setc
	ldi led_reg, 0x38
	rcall spi_txrx 
	rcall delay_30ms

	//Display ON/OFF
	ldi led_reg, 0x0F
	rcall spi_txrx 
	rcall delay_30ms

	//Clear Display
	ldi led_reg, 0x01
	rcall spi_txrx 
	rcall delay_30ms

	//Entry Mode Set
	ldi led_reg, 0x06
	rcall spi_txrx 
	rcall delay_30ms
	sbi PORTB, 2 
	sbi PORTB, 1

main_loop:
	
	rcall update_LCD 
	;rcall temperatur_sensor

	rjmp main_loop

update_LCD:
	;Börjar med att reservera utrymme i SRAM för bytsen med hjälp av Z pekaren 
	;Ladda 
	
	ldi ZL, low(Temp*2)
	ldi ZH, high(Temp*2)
	ldi XL, low(Temp_res)
	ldi	XH, high(Temp_res)
	rcall write
	
	ldi ZL, low(degrees*2)
	ldi	ZH, high(degrees*2)
	ldi XL, low(degrees_res)
	ldi	XH, high(degrees_res)
	rcall write

	ldi ZL, low(lim*2)
	ldi	ZH, high(lim*2)
	ldi XL, low(lim_res)
	ldi	XH, high(lim_res)
	rcall write

	ldi ZL, low(degree_lim*2)
	ldi	ZH, high(degree_lim*2)
	ldi XL, low(degree_lim_res)
	ldi	XH, high(degree_lim_res)
	rcall write

	ldi ZL, low(larma*2)
	ldi	ZH, high(larma*2)
	ldi XL, low(larma_res)
	ldi	XH, high(larma_res)
	rcall write

	ldi ZL, low(larm_variabel*2)
	ldi	ZH, high(larm_variabel*2)
	ldi XL, low(larm_variabel_res)
	ldi	XH, high(larm_variabel_res)
	rcall write
	ret

write:
	sbi PORTB, 1  ;RS
	cbi PORTB, 2  ;SS
	lpm led_reg, Z+ 
	st x+, led_reg
	cpi led_reg, 0x00
	breq bye
	rcall spi_txrx
	sbi PORTB, 2 
	rjmp write
	rjmp bye

bye:
	ret

infinite_loop:
stuck:
	cpi led_reg, 0x00
	breq stuck
	ret


LCD_master_init:
	clr led_reg 
	;SS, MOSI, SCK pins sätts till outputs
	ldi led_reg, (1<<2) | (1<<3) | (1<<5)
	out DDRB, led_reg
	;starta SPE, sätt som master, sätt clock rate till fck/16
	ldi led_reg, (1<<SPE) | (1<<MSTR) | (1<<SPR0)
	out SPCR, led_reg
	; done
	ret

spi_txrx:
	out SPDR, led_reg ; start tx/rx cycle by writing to SPDR
wait_txrx:
	in led_reg, SPSR  ; read status register
	sbrs led_reg, SPIF  ; skip if bit transfer complete
	rjmp wait_txrx
	in led_reg, SPDR  ; transfer complete, save received data
	ret 

delay_30ms:
	ldi loop_reg_2, 25
loop:
	ldi loop_reg_1, 255
	dec loop_reg_2
	tst loop_reg_2
	brne loop_2 
	ret
loop_2:
	dec loop_reg_1
	tst loop_reg_1
	breq loop
	rjmp loop_2

temperatur_sensor: 
	









//Minnnesdetaljer

;Flashminnet:
.cseg
temp: .db "Temp", EOS
degrees: .db "   XX°C     ", EOS
lim: .db "Lim", EOS
degree_lim: .db " XX°C to XX°C", EOS
larma: .db "Larm", EOS
larm_variabel: .db " X          ", EOS ;W, C, P motsvarar Warm, Cold, Perfect

;SRAM minnet: 
.dseg 
.org SRAM_START

;Första raden:
temp_res: .byte 3
degrees_res: .byte 13

;Andra raden:
lim_res: .byte 3
degree_lim_res: .byte 13

;Tredje raden: 
larma_res: .byte 4
larm_variabel_res: .byte 12





