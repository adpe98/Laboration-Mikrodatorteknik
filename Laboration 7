.include "m328pdef.inc"

.equ EOS = 0

.cseg

	rcall spi_master_init

	ldi ZL, low(mystring*2)
	ldi ZH, high(mystring*2)

	rjmp main_loop


main_loop:
	
	//Function Set
	cbi PORTB, 2
	ldi r16, 0x39
	rcall spi_txrx 
	rcall delay_30ms
	sbi PORTB, 2 

	//Bias Set
	cbi PORTB, 2
	ldi r16, 0x1D
	rcall spi_txrx 
	rcall delay_30ms
	sbi PORTB, 2 

	//Power Control
	cbi PORTB, 2
	ldi r16, 0x50
	rcall spi_txrx 
	rcall delay_30ms
	sbi PORTB, 2 

	//Follower Control
	cbi PORTB, 2
	ldi r16, 0x6C
	rcall spi_txrx 
	rcall delay_30ms
	sbi PORTB, 2 

	//Contrast Set
	cbi PORTB, 2
	ldi r16, 0x7C
	rcall spi_txrx 
	rcall delay_30ms
	sbi PORTB, 2 

	//Function Setc
	cbi PORTB, 2
	ldi r16, 0x38
	rcall spi_txrx 
	rcall delay_30ms
	sbi PORTB, 2 

	//Display ON/OFF
	cbi PORTB, 2
	ldi r16, 0x0F
	rcall spi_txrx 
	rcall delay_30ms
	sbi PORTB, 2 

	//Clear Display
	cbi PORTB, 2
	ldi r16, 0x01
	rcall spi_txrx 
	rcall delay_30ms
	sbi PORTB, 2 

	//Entry Mode Set
	cbi PORTB, 2
	ldi r16, 0x06
	rcall spi_txrx 
	rcall delay_30ms
	sbi PORTB, 2 

skriv_text:
	cbi PORTB, 2
	lpm r16,Z+ 
	cpi r16, 0x00
	breq main_loop
	rcall spi_txrx
	rcall delay_30ms
	sbi PORTB, 2 
	rjmp skriv_text


spi_master_init:
	;SS, MOSI, SCK pins sätts till outputs
	ldi r16, (1<<2) | (1<<3) | (1<<5)
	out DDRB, r16
	;starta SPE, sätt som master, sätt clock rate till fck/16
	ldi r16, (1<<SPE) | (1<<MSTR) | (1<<SPR0)
	out SPCR, r16
	; done
	ret

spi_txrx:
	out SPDR, r16 ; start tx/rx cycle by writing to SPDR
wait_txrx:
	in r16, SPSR  ; read status register
	sbrs r16, SPIF  ; skip if bit transfer complete
	rjmp wait_txrx
	in r16, SPDR  ; transfer complete, save received data
	ret 

delay_30ms:

		ldi r20, 25
	loop:
		ldi r18, 255
		dec r20
		tst r20
		brne loop_2 
		ret
	loop_2:
		dec r18
		tst r18
		breq loop
		rjmp loop_2

		mystring: .db "Hello World", EOS
