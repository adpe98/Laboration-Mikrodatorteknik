.include "m328pdef.inc"


.def seconds = r3
.def count_isr = r2
.def led_reg = r16 //Temporärt
.def temperature_limit_low = r17 //ROR EJ!
.def temperature_limit_high = r22 //ROR EJ!
.def loop_reg_1 = r18
.def loop_reg_2 = r19
.def temp_reg = r20
.def temporary = r21
.def temperatur = r24 //ROR EJ!

.equ EOS = 0

.cseg

	rjmp reset

reset:

	clr r16
	ldi r16, (1<<WGM01)                    ;;TIMER
    out TCCR0A, r16
    ldi r16, (1<<CS01) | (1<<CS00)
    out TCCR0B, r16

    ldi r25, 77
    out OCR0A, r18

	ldi r18, 255
    out OCR0A, r18  

    ldi r18, (1<<COM0A0)
    out TCCR0A, r18
	ldi r22, 12	;sätter baud rate till 12

	clr r21
	sts UBRR0H, r21
	sts UBRR0L, r22
	clr r22
	clr r21

	ldi r17, (1<<RXEN0)|(1<<TXEN0); enable UART recive and transmit 
	sts UCSR0B, r17;

	ldi r17, (1<<USBS0)|(3<<UCSZ00); declare fram format: 8 data, 2 stop bits
	sts UCSR0C, r17
	clr r17

	ldi r18, high(eeprom_data1)
	ldi r19, low(eeprom_data1)
	rcall EEPROM_read

	ldi r18, high(eeprom_data2)
	ldi r19, low(eeprom_data2)
	rcall EEPROM_read_1
	
	rcall SPI_master_init

	//Function Set
	cbi PORTB, 1
	cbi PORTB, 2
	ldi led_reg, 0x39
	rcall spi_txrx 
	rcall delay_30ms

	//Bias Set
	ldi led_reg, 0x1D
	rcall spi_txrx 
	rcall delay_30ms

	//Power Control
	ldi led_reg, 0x50
	rcall spi_txrx 
	rcall delay_30ms

	//Follower Control
	ldi led_reg, 0x6C
	rcall spi_txrx 
	rcall delay_30ms

	//Contrast Set
	ldi led_reg, 0x7C
	rcall spi_txrx 
	rcall delay_30ms

	//Function Setc
	ldi led_reg, 0x38
	rcall spi_txrx 
	rcall delay_30ms

	//Display ON/OFF
	ldi led_reg, 0x0F
	rcall spi_txrx 
	rcall delay_30ms

	//Clear Display
	ldi led_reg, 0x01
	rcall spi_txrx 
	rcall delay_30ms

	//Entry Mode Set
	ldi led_reg, 0x06
	rcall spi_txrx 
	sbi PORTB, 2 
	sbi PORTB, 1

	rcall update_LCD 

main_loop:
	
	rcall move_cursor
	rcall read_sensor
	rcall print_temp
	rcall limits_adjust //Flyttar cursor till där min låga limit ska printas, printar den låga limiten, flyttar till där den höga ska printas, printar den höga limiten. 
	rcall check_for_larm

	rjmp main_loop

EEPROM_read:

	sbic EECR, EEPE
	rjmp EEPROM_read
	out EEARH, r18
	out EEARL, r19
	sbi EECR, EERE
	in r17, EEDR
	ret

EEPROM_read_1:

	sbic EECR, EEPE
	rjmp EEPROM_read_1
	out EEARH, r18
	out EEARL, r19
	sbi EECR, EERE
	in r22, EEDR
	ret

check_for_larm:

	cp r24, r17
	brlo starta_larm_1 

	cp r24, r22
	brge starta_larm_2

stang_av_larm:
	rcall ta_bort_panik
	rcall stang_av_piezo
	rcall slack_diod

stop:
	ret

starta_larm_1:
	rcall starta_uart
	rcall Skriv_panik
	rcall starta_piezo_1
	rcall tand_diod_1
	rjmp stop

starta_larm_2:
	rcall starta_uart
	rcall Skriv_panik
	rcall starta_piezo_2
	rcall tand_diod_2
	rjmp stop

EEPROM_write_1:
	ldi r18, high(eeprom_data1)
	ldi r19, low(eeprom_data1)
	;väntar till att den tidigare writen ska bli klar
	sbic EECR, EEPE
	rjmp EEPROM_write_1
	out EEARH, r18 
	out EEARL, r19

	out EEDR, r17

	sbi EECR, EEMPE

	sbi EECR, EEPE

	ret

EEPROM_write_2:

	ldi r18, high(eeprom_data2)
	ldi r19, low(eeprom_data2)
	;väntar till att den tidigare writen ska bli klar
	sbic EECR, EEPE
	rjmp EEPROM_write_2
	out EEARH, r18 
	out EEARL, r19

	out EEDR, r22

	sbi EECR, EEMPE

	sbi EECR, EEPE
	ret

ta_bort_panik:

	clr r16
    cbi PORTB, 1 
	cbi PORTB, 2 
	ldi r16, 0b10100111
	rcall delay_30ms
	rcall spi_txrx
	sbi PORTB, 2
	sbi PORTB, 1 

	ldi ZL, low(clear*2)
	ldi ZH, high(clear*2)
	rcall write
	
	ret

stang_av_piezo:

	clr r16
	ldi r16, 0b00000000
	out DDRD, r16
	clr r16

	ret

slack_diod:
	cbi PORTD, 3
	cbi PORTD, 2
	ret

starta_uart:
	ldi ZL, low(uart_string*2)
	ldi ZH, high(uart_string*2)
	rcall uart_send_str
	rcall delay_mega

	ret

Skriv_panik:
	//flyttar cursor till 
	clr r16
    cbi PORTB, 1 
	cbi PORTB, 2 
	ldi r16, 0b10100111
	rcall delay_30ms
	rcall spi_txrx
	sbi PORTB, 2
	sbi PORTB, 1 

	ldi ZL, low(larm_string*2)
	ldi ZH, high(larm_string*2)
	rcall write
	ret

starta_piezo_1:

	clr r16
	ldi r16, 0b11100000
	out DDRD, r16

	clr r16
	ldi r16, (1<<WGM01)                    ;;TIMER
    out TCCR0A, r16
    ldi r16, (1<<CS01) | (1<<CS00)
    out TCCR0B, r16

    ldi r25, 77
    out OCR0A, r18

	ldi r18, 255
    out OCR0A, r18

    ldi r18, (1<<COM0A0) | (1<<WGM01)
    out TCCR0A, r18

	ret
	;timer för ljud? 

starta_piezo_2:
	clr r16
	ldi r16, 0b11100000
	out DDRD, r16

	clr r16
	ldi r16, (1<<WGM01)                    ;;TIMER
    out TCCR0A, r16
    ldi r16, (1<<CS01) | (1<<CS00)
    out TCCR0B, r16

    ldi r25, 40
    out OCR0A, r18

	ldi r18, 200
    out OCR0A, r18

    ldi r18, (1<<COM0A0) | (1<<WGM01)
    out TCCR0A, r18

	ret
	;timer för ljud? 

tand_diod_1:
	;sbi PORTD, 3
	sbi PORTD, 2
	ret


tand_diod_2:
	sbi PORTD, 3
	;sbi PORTD, 2
	ret

uart_send_str:
	//ladda på text i FLASH
	lpm r16,Z+ 
	cpi r16, 0x00
	breq stop_1
	rcall uart_send_char
	rjmp uart_send_str

stop_1:
	ret

uart_send_char:
	lds r18, UCSR0A
	sbrs r18, UDRE0
	rjmp uart_send_char
	sts UDR0, r16 // data från register r16 laddas på I/0 data registret för att skickas problemet i nuläget är att inget kontrollerar om platsen är tom. 
	ret

limits_adjust: 
	rcall aktivera_knappar
	rcall move_cursor_10
	rcall print_limit_low
	rcall delay_30ms
	rcall print_temp
	rcall move_cursor_70
	rcall print_limit_high
	rcall print_temp
	ret

aktivera_knappar:
	clr r16
	ldi r16, 0b00000000 //
	out DDRC, r16 //Gör port pc5 - pc2 till ingångar
	ldi r16, 0b00111100
	out PORTC, r16
	ret

move_cursor_10:
	;move cursor 10, print 10
	clr r16
    cbi PORTB, 1 
	cbi PORTB, 2 
	ldi r16, 0b10010101
	rcall spi_txrx
	sbi PORTB, 2
	sbi PORTB, 1 
	ret

print_limit_low:
	cpi r17, 0b00001010
	brge jump
	ldi r17, 0b00001010
//Kolla knappar ;här ska värdet inc med 1 om knapp PINC4 är nedtryckt eller dec om knapp PINC5 är nedtryckt.
jump:
	cpi r17, 0b01000110
	brlo jump_2
	ldi r17, 0b1000110
jump_2:
	sbic PINC, 4
	rjmp skippa_ladda_limit_low //skippa att få diod att lysa
	inc r17
	rcall EEPROM_write_1

skippa_ladda_limit_low:

	sbic PINC, 5
	rjmp skippa_ladda_limit_low_1
	dec r17
	rcall EEPROM_write_1


skippa_ladda_limit_low_1:

	mov r23, r17
	clr r18
	clr r25
minus_10_2:
	cpi r23, 0b00001010
	brlo minus_1_2
	inc r25 
	subi r23, 10 
	rjmp minus_10_2
minus_1_2:
	cpi r23, 0x00
	breq print
	inc r18
	dec r23
	rjmp minus_1_2
print:
	ret
	
move_cursor_70:
	clr r16
	cbi PORTB, 1 
	cbi PORTB, 2 
	ldi r16, 0b10011000
	rcall spi_txrx
	rcall delay_30ms
	sbi PORTB, 2
	sbi PORTB, 1 
	ret

print_limit_high:
	cpi r22, 0b00001111
	brge jump_3 
	ldi r22, 0b01000110
jump_3:
	cpi r22, 0b01000110
	brlo jump_4
	ldi r22, 0b01000110
jump_4:
	sbic PINC, 3
	rjmp kolla_pin2
	dec r22
	rcall EEPROM_write_2
kolla_pin2:
	sbic PINC, 2
	rjmp skippa_ladda_limit_high
	inc r22
	rcall EEPROM_write_2
skippa_ladda_limit_high:
	
	mov r23, r22
	clr r18
	clr r25
minus_10_3:
	cpi r23, 0b00001010
	brlo minus_1_3
	inc r25 
	subi r23, 10 
	rjmp minus_10_3
minus_1_3:
	cpi r23, 0x00
	breq print_2
	inc r18
	dec r23
	rjmp minus_1_3
print_2:
	ret
	
update_LCD:
	;Börjar med att reservera utrymme i SRAM för bytsen med hjälp av Z pekaren 
	;Ladda 
	
	ldi ZL, low(temperature_string*2)
	ldi ZH, high(temperature_string*2)
	rcall write
	
	ret

move_cursor:
	clr r16
    cbi PORTB, 1 
	cbi PORTB, 2 
	ldi r16, 0b10000101
	rcall spi_txrx
	sbi PORTB, 2
	sbi PORTB, 1 
	ret

read_sensor:
	
	sbi PORTB, 0
	clr r16
	cbi PORTB, 0
	rcall spi_txrx ;samlar in datat som ligger på SPI:n och lägger över på temperatur registret
	mov r24, r16
	rcall spi_txrx
	mov r18, r16
	lsl r18
	ROL r24
	andi r18, 0b00000001
	OR r24, r18 ;r16 och r18 adderas ihop och värdet sparas på r16
	sbi PORTB, 0
	rjmp calculate

;grönt
calculate:
	mov r23, r24
	clr r18
	clr r25
minus_10:
	cpi r23, 0b00001010
	brlo minus_1
	inc r25 
	subi r23, 10 
	rjmp minus_10

minus_1:
	cpi r23, 0x00
	breq bye
	inc r18
	dec r23
	rjmp minus_1
	
print_temp:	
	subi r18, -48
	subi r25, -48

	mov r16, r25
	cbi PORTB, 2
	rcall spi_txrx
	sbi PORTB, 2

	mov r16, r18
	cbi PORTB, 2 
	rcall spi_txrx
	sbi PORTB, 2

	ret

write:
	clr led_reg
	sbi PORTB, 1  ;RS
	lpm r16, Z+ 
	tst r16
	breq bye
	cbi PORTB, 2  ;SS
	rcall spi_txrx
	cbi PORTB, 1 
	sbi PORTB, 2 
	rjmp write
	rjmp bye

bye:
	ret

SPI_master_init:
	clr r16 
	;SS, MOSI, SCK pins sätts till outputs
	ldi r16, (1<<2) | (1<<3) | (1<<5) | (1<<1) | (1<<4) |(1<<0)
	out DDRB, led_reg
	;starta SPE, sätt som master, sätt clock rate till fck/16
	ldi r16, (1<<SPE) | (1<<MSTR) | (1<<SPR0)
	out SPCR, r16
	; done
	ret

spi_txrx:
	out SPDR, r16 ; start tx/rx cycle by writing to SPDR
wait_txrx:
	in r16, SPSR  ; read status register
	sbrs r16, SPIF  ; skip if bit transfer complete
	rjmp wait_txrx
	in r16, SPDR  ; transfer complete, save received data
	ret 

delay_mega:
	ldi loop_reg_2, 255
loop_3:
	ldi r20 , 255
	dec r21 
	tst r21 
	brne loop_2 
	ret
loop_4:
	dec r20 
	tst r20 
	breq loop_3
	rjmp loop_4

delay_30ms:
	ldi r21 , 25
loop:
	ldi r20 , 255
	dec r21 
	tst r21 
	brne loop_2 
	ret
loop_2:
	dec r20 
	tst r20 
	breq loop
	rjmp loop_2
	
//Minnnesdetaljer

;Flashminnet:
.cseg
temperature_string: .db"Temp            Lim    -        Larm            ",EOS ;W, C, P motsvarar Warm, Cold, Perfect
larm_string: .db "PANIK", EOS
clear: .db "     ", EOS
uart_string: .db "PANIK", EOS

.eseg
eeprom_data1: .db 'E'
eeprom_data2: .db 'B'
